{"version":3,"sources":["services/swapi-service.js","services/dummy-swapi-service.js","components/header/index.js","components/spinner/index.js","components/error-indicator/index.js","components/random-planet/index.js","components/error-bowndry/index.js","avatar.png","components/item-details/index.js","components/record/index.js","components/hoc-helpers/with-data.js","components/swapi-service-context/index.js","components/hoc-helpers/with-swapi-service.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/index.js","components/sw-components/item-lists.js","components/row/index.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/pages/admin-page.js","components/pages/login-page.js","components/app/index.js","index.js"],"names":["SwapiService","_apiBase","_imgBase","getPersonImage","id","getStarshipImage","getPlanetImage","getAllPeople","a","getResource","res","results","map","_transformPerson","getPerson","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarships","starship","_extractId","name","population","rotationPeriod","rotation_period","diameter","gender","birthYear","birth_year","eyeColor","eye_color","model","manufactures","costInCredits","length","crew","passengers","cargoCapacity","url","fetch","this","ok","Error","status","json","item","match","DummySwapiService","_people","_planets","_starships","manufacturer","header","props","onServiceChange","className","to","right","onClick","Spinner","ErrorIndicator","RandomPlanet","swapiService","state","loading","error","onPlanetLoaded","setState","onError","err","updatePlanet","Math","floor","random","then","catch","updateInterval","interval","setInterval","clearInterval","hasData","ErrorMessage","spinner","content","Component","defaultProps","PlanetView","src","alt","ErrorBoubdry","hasError","children","ItemDetails","image","avatar","updateItem","prevProps","itemId","getData","getImageUrl","React","Children","child","cloneElement","Record","field","label","withData","View","data","update","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","Wrapped","mapMethodsToProps","serviceProps","ItemList","onItemSelected","renderLabel","items","withChildFunction","fn","renderName","PersonList","StarshipList","PlanetList","Row","left","withRouter","history","params","push","PlanetPage","selectedItem","adminPage","isLoggedIn","loginPage","onLogin","loginContent","App","value","pageWrapId","outerContainerId","path","render","exact","component","PeoplePage","StarshipPage","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83bde398.chunk.js","sourcesContent":["export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.dev/api/';\r\n    _imgBase = 'https://starwars-visualguide.com/assets/img';\r\n\r\n    async getResource(url) {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Culd not fetch ${url}, received ${res.status}`)\r\n        }\r\n\r\n        return await res.json();\r\n    }\r\n\r\n    getPersonImage = ({ id }) => {\r\n        return `${this._imgBase}/characters/${id}.jpg`;\r\n    }\r\n\r\n    getStarshipImage = ({ id }) => {\r\n        return `${this._imgBase}/starships/${id}.jpg`;\r\n    }\r\n\r\n    getPlanetImage = ({ id }) => {\r\n        return `${this._imgBase}/planets/${id}.jpg`;\r\n    }\r\n\r\n    getAllPeople = async () => {\r\n        const res = await this.getResource(`people/`);\r\n        return res.results.map(this._transformPerson);\r\n    }\r\n    \r\n    getPerson = async (id) => {\r\n        const person = await this.getResource(`people/${id}`)\r\n        return this._transformPerson(person);\r\n    }\r\n\r\n    getAllPlanets = async () => {\r\n        const res = await this.getResource(`planets/`);\r\n        return res.results.map(this._transformPlanet);\r\n    }\r\n    \r\n    getPlanet = async (id) => {\r\n        const planet = await this.getResource(`planets/${id}`);\r\n        return this._transformPlanet(planet);\r\n    }\r\n\r\n    getAllStarships = async () => {\r\n        const res = await this.getResource(`starships/`);\r\n        return res.results.map(this._transformStarship);\r\n    }\r\n\r\n    getStarships = async (id) => {\r\n        const starship = await this.getResource(`starships/${id}`);\r\n        return this._transformStarship(starship);\r\n    }\r\n\r\n    _extractId(item) {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(idRegExp)[1];\r\n\r\n    }\r\n\r\n    _transformPlanet = (planet) => {\r\n\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        }\r\n    }\r\n\r\n    _transformPerson = (person) => {\r\n\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color\r\n        }\r\n    }\r\n\r\n    _transformStarship = (starship) => {\r\n\r\n        return {\r\n            id: this._extractId(starship),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            manufactures: starship.manufactures,\r\n            costInCredits: starship.costInCredits,\r\n            length: starship.length,\r\n            crew: starship.crew,\r\n            passengers: starship.passengers,\r\n            cargoCapacity: starship.cargoCapacity\r\n        }\r\n    }\r\n};","export default class DummySwapiService {\r\n\r\n    _people = [\r\n      {\r\n        id: 1,\r\n        name: 'Bilbo Baggins [TEST DATA]',\r\n        gender: 'male',\r\n        birthYear: 'long ago',\r\n        eyeColor: 'dark brown'\r\n      },\r\n  \r\n      {\r\n        id: 2,\r\n        name: 'Frodo Baggins [TEST DATA]',\r\n        gender: 'male',\r\n        birthYear: 'long ago',\r\n        eyeColor: 'dark brown'\r\n      }\r\n    ];\r\n  \r\n    _planets = [\r\n      {\r\n        id: 1,\r\n        name: 'Earth [TEST DATA]',\r\n        population: '7.530.000.000',\r\n        rotationPeriod: '23 hours 56 seconds',\r\n        diameter: '12.742 km'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Venus [TEST DATA]',\r\n        population: 'not known',\r\n        rotationPeriod: '243 days',\r\n        diameter: '12.104 km'\r\n      }\r\n    ];\r\n  \r\n    _starships = [\r\n      {\r\n        id: 1,\r\n        name: 'USS Enterprise [TEST DATA]',\r\n        model: 'NCC-1701-C',\r\n        manufacturer: 'Northrop Grumman Shipbuilding',\r\n        costInCredits: 'not known',\r\n        length: 'approx 300 meters',\r\n        crew: 1000,\r\n        passengers: 50,\r\n        cargoCapacity: 100\r\n      }\r\n    ];\r\n  \r\n    getAllPeople = async () => {\r\n      return this._people;\r\n    };\r\n  \r\n    getPerson = async () => {\r\n      return this._people[0];\r\n    };\r\n  \r\n    getAllPlanets = async () => {\r\n      return this._planets;\r\n    };\r\n  \r\n    getPlanet = async () => {\r\n      return this._planets[0]\r\n    };\r\n  \r\n    getAllStarships = async () => {\r\n      return this._starships;\r\n    };\r\n  \r\n    getStarships = async () => {\r\n      return this._starships[0];\r\n    };\r\n  \r\n    getPersonImage = () => {\r\n      return `https://placeimg.com/400/500/people`\r\n    };\r\n  \r\n    getStarshipImage = () => {\r\n      return `https://placeimg.com/600/400/tech`;\r\n    };\r\n  \r\n    getPlanetImage = () => {\r\n      return `https://placeimg.com/400/400/nature`\r\n    };\r\n  }","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { slide as Menu } from 'react-burger-menu';\r\n\r\nimport './header.css'\r\n\r\nfunction header(props) {\r\n    const { onServiceChange } = props;\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header__title\">\r\n                <Link to=\"/\" className=\"header__link\">Star DB</Link>\r\n            </h1>\r\n            <Menu {...props} right >\r\n                <ul className=\"header__list list\">\r\n                    <li className=\"list__item\">\r\n                        <Link to=\"/people/\" className=\"list__item-link\">People</Link>\r\n                    </li>\r\n                    <li className=\"list__item\">\r\n                        <Link to=\"/planets/\" className=\"list__item-link\">Planets</Link>\r\n                    </li>\r\n                    <li className=\"list__item\">\r\n                        <Link to=\"/starships/\" className=\"list__item-link\">Starships</Link>\r\n                    </li>\r\n                    <li className=\"list__item\">\r\n                        <Link to=\"/login\" className=\"list__item-link\">Login</Link>\r\n                    </li>\r\n                    <li className=\"list__item\">\r\n                        <Link to=\"/admin\" className=\"list__item-link\">Admin</Link>\r\n                    </li>\r\n                </ul>\r\n            </Menu>\r\n            <button \r\n                onClick={onServiceChange}\r\n                className=\"header-btn\">\r\n                Change Service\r\n            </button>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default header;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div id=\"loader\">\r\n            <div className=\"outer\">\r\n                <div className=\"inner\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\n\r\n\r\nfunction ErrorIndicator(props) {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <span className=\"bomm\">BOOM! </span>            \r\n            <span> Something has gona terribly wrong </span>            \r\n            <span> (but we already sent droids to fix it)</span>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator'\r\n\r\nimport './random-planet.css';\r\n\r\nclass RandomPlanet extends Component {\r\n\r\n    static defaultProps = {\r\n        updateInterval: 10000\r\n    };\r\n\r\n    static propTypes = {\r\n        updateInterval: PropTypes.number\r\n    };\r\n\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true,\r\n        error: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { updateInterval } = this.props;\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, updateInterval);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    onPlanetLoaded = (planet) => {\r\n        this.setState({\r\n            planet,\r\n            loading: false,\r\n            error: false\r\n        });\r\n    };\r\n    \r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        })\r\n    };\r\n\r\n    updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 17) + 2;\r\n        this.swapiService\r\n        .getPlanet(id)\r\n        .then(this.onPlanetLoaded)\r\n        .catch(this.onError);\r\n    };\r\n\r\n    render() {\r\n\r\n        const { planet, loading, error } = this.state;\r\n\r\n        const hasData = !(loading || error);\r\n\r\n        const ErrorMessage = error ? <ErrorIndicator /> : null;\r\n        const spinner = loading ? <Spinner /> : null;\r\n        const content = hasData ? <PlanetView planet={ planet } /> : null;\r\n\r\n        return (\r\n            <div className=\"random-planet\">\r\n                { ErrorMessage }\r\n                { spinner }\r\n                { content }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default RandomPlanet;\r\n\r\nconst PlanetView = ({ planet }) => {\r\n    const { id, name, population, rotationPeriod, diameter } = planet;\r\n    return (\r\n        <>\r\n            <img className=\"random-planet__image\" \r\n                    src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"planet\" />\r\n            <div className=\"random-planet__info info\">\r\n                <h2 className=\"info__title\">{name}</h2>\r\n                <ul className=\"info__list\">\r\n                    <li className=\"info__list-item\">\r\n                        <span className=\"term\">Population </span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"info__list-item\">\r\n                        <span className=\"term\">Rotation period </span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"info__list-item\">\r\n                        <span className=\"term\">Diameter </span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nclass ErrorBoubdry extends Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n    \r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n        \r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoubdry;","export default __webpack_public_path__ + \"static/media/avatar.342ab2eb.png\";","import React, { Component } from 'react';\r\n\r\nimport './item-details.css';\r\nimport avatar from '../../avatar.png'\r\n\r\nclass ItemDetails extends Component {\r\n\r\n    state = {\r\n        item: null,\r\n        image: avatar\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemId !== prevProps.itemId ||\r\n            this.props.getData !== prevProps.getData ||\r\n            this.props.getImageUrl !== prevProps.getImageUrl) {\r\n            this.updateItem();\r\n          }\r\n    }\r\n\r\n    updateItem() {\r\n        const { itemId, getData, getImageUrl } = this.props;\r\n\r\n        if (!itemId) {\r\n            return;\r\n        };\r\n        \r\n        getData(itemId)\r\n            .then((item) => {\r\n                this.setState({ \r\n                    item,\r\n                    image: getImageUrl(item)\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { item, image } = this.state;\r\n\r\n        if (!item) {\r\n            return <span>Select item from a list</span>\r\n        }\r\n        \r\n        const { name = 'N/A' } = item;\r\n\r\n        return (\r\n            <div className=\"item-details\">\r\n                <img className=\"item-details__image\" \r\n                    src={ image } alt={ name } />\r\n                <div className=\"item-details__info info\">\r\n                    <h2 className=\"info__title\">\r\n                        { name }\r\n                    </h2>\r\n                    <ul className=\"info__list\">\r\n                        { \r\n                            React.Children.map(this.props.children, (child) => {\r\n                                return React.cloneElement(child, { item });\r\n                            } )\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemDetails;","import React from 'react';\r\n\r\nconst Record = ({ item, field, label }) => {\r\n    return (\r\n        <li className=\"info__list-item\">\r\n            <span className=\"term\"> { label } </span>\r\n            <span> { item[field] } </span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport { Record };","import React, { Component } from 'react';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\n\r\nconst withData = (View) => {\r\n    return class extends Component {\r\n        \r\n        state = {\r\n            data: null,\r\n            loading: true,\r\n            error: false\r\n        };\r\n\r\n        componentDidUpdate(prevProps) {\r\n            if (this.props.getData !== prevProps.getData) {\r\n                this.update();\r\n            }\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.update();\r\n        };\r\n\r\n        update() {\r\n            this.setState( {\r\n                loading: true,\r\n                error: false\r\n            });\r\n\r\n            this.props.getData()\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false\r\n                    });\r\n            })\r\n            .catch(() => {\r\n                this.setState({\r\n                    error: true,\r\n                    loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        render() {\r\n            const { data, loading, error } = this.state;\r\n        \r\n            if (loading) {\r\n                return <Spinner />\r\n            }\r\n\r\n            if (error) {\r\n                return <ErrorIndicator />\r\n            }\r\n\r\n            return <View {...this.props} data={data} />\r\n        }\r\n    }\r\n};\r\n\r\nexport default withData;","import React from 'react';\r\n\r\nconst {\r\n    Provider : SwapiServiceProvider,\r\n    Consumer : SwapiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer\r\n}","import React from 'react';\r\n\r\nimport { SwapiServiceConsumer } from '../swapi-service-context';\r\n\r\nconst withSwapiService = (Wrapped, mapMethodsToProps) => {\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        const serviceProps = mapMethodsToProps(swapiService);\r\n                        return (\r\n                            <Wrapped {...props} {...serviceProps} />\r\n                        )\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withSwapiService;","import React from \"react\";\r\nimport ItemDetails from \"../item-details\";\r\n\r\nimport { Record } from \"../record\";\r\nimport { withSwapiService } from \"../hoc-helpers\";\r\n\r\nconst PersonDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}> \r\n            <Record field=\"gender\" label=\"Gender\" />\r\n            <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getPerson,\r\n        getImageUrl: swapiService.getPersonImage\r\n    }\r\n};\r\n\r\nexport default withSwapiService(PersonDetails, mapMethodsToProps);","import React from \"react\";\r\nimport ItemDetails from \"../item-details\";\r\n\r\nimport { Record } from \"../record\";\r\nimport { withSwapiService } from \"../hoc-helpers\";\r\n\r\nconst PlanetDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}> \r\n            <Record field=\"population\" label=\"Population\" />\r\n            <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n            <Record field=\"diameter\" label=\"Diameter\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getPlanet,\r\n        getImageUrl: swapiService.getPlanetImage\r\n    }\r\n};\r\n\r\nexport default withSwapiService(PlanetDetails, mapMethodsToProps);","import React from \"react\";\r\nimport ItemDetails from \"../item-details\";\r\n\r\nimport { Record } from \"../record\";\r\nimport { withSwapiService } from \"../hoc-helpers\";\r\n\r\nconst StarshipDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}> \r\n            <Record field=\"model\" label=\"Model\" />\r\n            <Record field=\"length\" label=\"Length\" />\r\n            <Record field=\"costInCredits\" label=\"Cost\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getStarships,\r\n        getImageUrl: swapiService.getStarshipImage\r\n    }\r\n};\r\n\r\nexport default withSwapiService(StarshipDetails, mapMethodsToProps);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './item-list.css'\r\n\r\nconst ItemList = (props) => {\r\n\r\n    const { data, onItemSelected, children: renderLabel } = props;\r\n    \r\n    const items = data.map((item) => {\r\n        const { id } = item;\r\n        const label = renderLabel(item);\r\n\r\n        return (\r\n            <li key={id}\r\n                className=\"info__list-item\"\r\n                onClick={() => onItemSelected(id)}>\r\n                { label }\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"info__list\">\r\n            { items }        \r\n        </ul>\r\n    );\r\n    \r\n};\r\n\r\nItemList.defaultProps = {\r\n    onItemSelected: () => {}\r\n};\r\n\r\nItemList.propTypes = {\r\n    onItemSelected: PropTypes.func,\r\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    children: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ItemList;","import React from \"react\";\r\n\r\nimport ItemList from \"../item-list\";\r\nimport { withData, withSwapiService } from \"../hoc-helpers\";\r\n\r\n\r\nconst withChildFunction = (Wrapped, fn) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped {...props}>\r\n                {fn}\r\n            </Wrapped>\r\n        )\r\n    }\r\n};\r\n\r\nconst renderName = ({name}) => <span>{name}</span>;\r\n\r\nconst renderModelAndName = ({model ,name}) => <span>{name} ({model})</span>;\r\n\r\nconst mapPersonMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPeople,\r\n    }\r\n};\r\nconst mapPlanetMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPlanets,\r\n    }\r\n};\r\nconst mapStarshipMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllStarships,\r\n    }\r\n};\r\n\r\nconst PersonList = withSwapiService(\r\n    withData(\r\n        withChildFunction(ItemList, renderName)),\r\n    mapPersonMethodsToProps);\r\n\r\nconst StarshipList = withSwapiService(\r\n    withData(\r\n        withChildFunction(ItemList, renderModelAndName)),\r\n    mapStarshipMethodsToProps);\r\n\r\nconst PlanetList = withSwapiService(\r\n    withData(\r\n        withChildFunction(ItemList, renderName)),\r\n    mapPlanetMethodsToProps);\r\n\r\nexport {\r\n    PersonList,\r\n    StarshipList,\r\n    PlanetList\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './row.css';\r\n\r\nfunction Row({left, right}) {\r\n    return (\r\n        <div className=\"details\">\r\n            { left }\r\n            { right }\r\n        </div>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    left: PropTypes.node,\r\n    right: PropTypes.node\r\n};\r\nexport default Row;","import React from 'react';\r\nimport Row from '../row';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { PersonDetails, PersonList } from '../sw-components';\r\n// import ErrorBoubdry from '../error-bowndry';\r\n\r\nconst PeoplePage = ({ history, match }) => {\r\n    const { id } = match.params;\r\n    return (\r\n        <Row \r\n          left={<PersonList onItemSelected={(id) => history.push(id)} />}\r\n          right={<PersonDetails itemId={ id } />}\r\n        />\r\n    );\r\n    \r\n}\r\n\r\nexport default withRouter(PeoplePage);","import React, { Component } from 'react';\r\n\r\nimport { PlanetDetails, PlanetList } from '../sw-components';\r\nimport Row from '../row';\r\n// import ErrorBoubdry from '../error-bowndry';\r\n\r\nclass PlanetPage extends Component {\r\n\r\n    state = {\r\n        selectedItem: null\r\n    }\r\n    \r\n    onItemSelected = (selectedItem) => {\r\n        this.setState({ selectedItem });\r\n    };\r\n\r\n    render() {\r\n        const { selectedItem } = this.state;\r\n        return (\r\n            <Row \r\n              left={<PlanetList onItemSelected={this.onItemSelected} />}\r\n              right={<PlanetDetails itemId={ selectedItem } />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlanetPage;","import React from 'react';\r\nimport { StarshipList } from '../sw-components';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst StarshipPage = ({ history }) => {\r\n    return (\r\n        <StarshipList \r\n            onItemSelected={(id) => history.push(id)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(StarshipPage);","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nfunction adminPage({isLoggedIn}) {\n\n    const adminContent = <div><h2>Hi Admin!</h2></div>;\n\n    const content = isLoggedIn ? adminContent : <Redirect to=\"/login\" />\n    \n    return content;\n}\n\nexport default adminPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nfunction loginPage({ isLoggedIn, onLogin }) {\n\n    const loginContent = \n        <div>\n            <p>Login as administrator</p>\n            <button\n                className=\"header-btn\"\n                onClick={onLogin}\n            >\n                Login\n            </button>\n        </div>;\n    \n    const content = isLoggedIn ? <Redirect to=\"/\" /> : loginContent;\n\n    return content;\n}\n\nexport default loginPage;","import React, { Component } from 'react';\n\nimport SwapiService from '../../services/swapi-service';\nimport DummySwapiService from '../../services/dummy-swapi-service';\n\nimport Header from '../header';\nimport RandomPlanet  from '../random-planet';\nimport ErrorIndicator from '../error-indicator';\nimport ErrorBoubdry from '../error-bowndry';\nimport { StarshipDetails } from '../sw-components';\n\nimport { \n  PeoplePage, \n  PlanetPage, \n  StarshipPage,\n  LoginPage,\n  AdminPage } from '../pages';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { SwapiServiceProvider } from '../swapi-service-context';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    swapiService: new SwapiService(),\n    hasError: false,\n    isLoggedIn: false\n  };\n\n  onLogin = () => {\n    this.setState({\n      isLoggedIn: true\n    });\n  };\n\n  onServiceChange = () => {\n    this.setState(({swapiService}) => {\n\n      const Service = swapiService instanceof SwapiService ? \n        DummySwapiService : SwapiService;\n        \n        return {\n          swapiService: new Service()\n        };\n    });\n  };\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    const { isLoggedIn } = this.state;\n    \n    return (\n      <div id=\"app\" className=\"container\">\n        <ErrorBoubdry>\n          <SwapiServiceProvider value={this.state.swapiService}>\n            <Router>\n                <Header onServiceChange={this.onServiceChange} pageWrapId={\"page-wrap\"} outerContainerId={\"container\"} />\n                <div id=\"page-wrap\">\n                  <RandomPlanet />\n                  <Switch>\n                    <Route path=\"/star-wars-db\" render={() => <h2>Welcone to Star DB</h2>} exact />\n                    <Route path=\"/people/:id?\" component={PeoplePage} />\n                    <Route path=\"/planets\" component={PlanetPage} />\n                    <Route path=\"/starships\" exact component={StarshipPage} />\n                    <Route path=\"/starships/:id\" \n                            render={({ match }) => {\n                              const { id } = match.params;\n                              return <StarshipDetails itemId={id} />\n                            }} />\n                    <Route \n                      path=\"/login\" \n                      render={() => (\n                        <LoginPage isLoggedIn={isLoggedIn} onLogin={this.onLogin} />\n                      )} \n                    />\n                    <Route path=\"/admin\" render={() => <AdminPage isLoggedIn={isLoggedIn} />} />\n                    <Route render={() => <h2>Page not found</h2>}/>\n                  </Switch>\n                </div>\n            </Router>\n          </SwapiServiceProvider>\n        </ErrorBoubdry>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}